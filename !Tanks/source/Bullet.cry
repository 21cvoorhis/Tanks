import Graphics2D;
import Math;
import Random;
import TwoCansAlpha4;

class Bullet : Object{
	
	field timeLeft; //how long bullet should stay on screen in seconds
	
	constructor(pos, vel, radius, color, vAngle, timeLeft) : base(pos, vel, radius, color){
		this.vAngle = vAngle;
		
		this.target[0] = Math.cos(vAngle);
		this.target[1] = Math.sin(vAngle);
		this.motion = true;
		
		this.timeLeft = timeLeft;
	}
	
	
	function updateBullet(walls, tanks){
		
		if(this.timeLeft > 0){
			this.timeLeft = this.timeLeft - DT;
			this.updatePos();
			this.collisionWalls(walls);
			this.collisionTanks(tanks);
		}else{
			this.alive = false;
		}
		
	}
	
	function collisionWalls(walls){
		for(wall : walls){
			if(pointRectCollision(this.pos, wall)){
				this.bounce(wall);
			}
		}
	}
	
	function collisionTanks(tanks){
		for(tank : tanks){
			if(pointQuadCollision(this.pos, tank.bPoints) && tank.alive){
				this.alive = false;
			}
		}
	}
	
	function bounce(wall){
		
		if(this.prevPos[0] < wall.left || this.prevPos[0] > wall.right){
			this.target[0] = -this.target[0];
		}else if(this.prevPos[1] < wall.top || this.prevPos[1] > wall.bottom){
			this.target[1] = -this.target[1];
		}
		
		this.pos[0] = this.prevPos[0];
		this.pos[1] = this.prevPos[1];
		this.vAngle = Math.arctan(this.target[1], this.target[0]);
		
	}
	
	function drawBullet(){
		Graphics2D.Draw.ellipse(this.pos[0]-(this.r*0.5), this.pos[1]-(this.r*0.5), this.r, this.r, this.color[0], this.color[1], this.color[2]);
	}
	
}