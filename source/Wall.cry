import Graphics2D;
import Math;
import Random;
import TwoCansAlpha4;

//format is intentionally similar to the Graphics2D rectangle function

/*
- For destructable walls, make sure to update the pathfinding mesh
	- For the relevant node, change it's weight, then for each of its neighbors rerun the find neighbors command
- Update position to be in the middle of the block, not the left corner
*/

class Wall{
	
	field pos;
	field tile;
	
	field w; //width
	field h; //height
	
	field sides;
	field left;
	field right;
	field top;
	field bottom;
	
	field bPoints;
	field segments;
	
	field color;
	field border;
	field time = 0;
	
	field alive = true;
	field weak = false;
	
	constructor(p, w, h, color){ //p = corner position [x,y]
	
		this.pos = [p[0] + (w/2.0), p[1] + (h/2.0)]; //center
		
		if((ensureRange(this.pos[0], 20.0, WIDTH-20.0) == this.pos[0]) && (ensureRange(this.pos[1], 20.0, HEIGHT-20.0) == this.pos[1])){
			this.tile = posToTile(this.pos);
			this.border = false;
		}else{
			this.tile = null;
			this.border = true;
		}
		
		this.w = w;
		this.h = h;
		
		this.left = p[0];
		this.right = p[0] + w;
		this.top = p[1];
		this.bottom = p[1] + h;
		this.sides = {
			"left": this.left,
			"right": this.right,
			"top": this.top,
			"bottom": this.bottom,
		};
		
		this.bPoints = [[this.left, this.top], [this.right, this.top], [this.right, this.bottom], [this.left, this.bottom]];
		this.segments = pointsToSegments(this.bPoints);
		
		this.color = color;
		this.color.add(0);
	}
	
	function updateWall(){
	
		this.time += DT;
		
		if((this.border || this.time > 1)  && this.time < 4.0){
			this.color[3] = fade(1.2, this.color[3], true);
		}
		
	}
	
	function drawWallOutline(){
		
		Graphics2D.Draw.rectangle(this.left-2, this.top-2, this.w+4, this.h+4, 0, 0, 0, this.color[3]);
		
	}
	
	function drawWallInside(){
		
		Graphics2D.Draw.rectangle(this.left, this.top, this.w, this.h, this.color[0], this.color[1], this.color[2], this.color[3]);
		
	}
	
}

class WeakWall : Wall{
	
	field explodingTime = 2;
	
	constructor(p, w, h, color) : base(p, w, h, color){
		this.weak = true;
	}
	
	function updateWeakWall(tanks, wallSpecters){
	
		this.time += DT;
		
		if(this.time > 1 && this.time < 4.0){
			this.color[3] = fade(1.2, this.color[3], true);
		}
		
		if(this.alive){
			this.collisionDeath(tanks, wallSpecters);
		}else{
			//generate all 9 particles
		}
		
	}
	
	function collisionDeath(tanks, wallSpecters){
		for(i = 0; i < tanks.length; i++){
			for(j = 0; j < tanks[i].explosions.length; j++){
				explosion = tanks[i].explosions[j];
				if(circleRectCollision(explosion.pos, explosion.r, this.sides) && explosion.timeLeft >= explosion.killTime && explosion.r > 15){
					this.alive = false;
					this.makeSpecter(explosion, wallSpecters);
					return null;
				}
			}
		}
	}
	
	function makeSpecter(explosion, wallSpecters){
		
		dx = this.pos[0] - explosion.pos[0];
		dy = this.pos[1] - explosion.pos[1];
		vAngle = Math.arctan(dy, dx);
		
		dr = ((dy**2) + (dx**2))**0.5;
		vel = Math.abs(150-(dr/6.0));
		
		wallSpecters.add(new WallSpecter(this.pos.clone(), vel, vAngle, this.w, this.h, this.left, this.top, this.color));
		
	}
	
	function drawWallOutline(){
		
		Graphics2D.Draw.rectangle(this.left-2, this.top-2, this.w+4, this.h+4, 0, 0, 0, this.color[3]);
		
	}
	
	function drawWallInside(){
		
		Graphics2D.Draw.rectangle(this.left, this.top, this.w, this.h, this.color[0], this.color[1], this.color[2], this.color[3]);
		
	}
	
}

class WallSpecter{
	
	field pos;
	field vel;
	field vAngle;
	
	field w; //width
	field h; //height
	
	field left;
	field top;
	
	field color;
	
	field timeLeft = 0.5;
	field alive = true;
	
	constructor(pos, vel, vAngle, w, h, left, top, color){
		
		this.pos = pos;
		
		this.w = w;
		this.h = h;
		
		this.left = left;
		this.top = top;
		
		this.vel = vel;
		this.vAngle = vAngle;
		
		this.color = color;
		
	}
	
	function updateSpecter(){
		
		this.timeLeft -= DT;
		
		if(this.timeLeft > 0){
			
			this.color[3] = fade(0.5, this.color[3], false);
			
			if(this.vel > 15){
				this.vel -= 8;
			}
			
			if(this.vel < 15){
				this.vel = 15;
			}
			
			this.pos[0] = this.pos[0] + (this.vel * DT * Math.cos(this.vAngle));
			this.pos[1] = this.pos[1] + (this.vel * DT * Math.sin(this.vAngle));
			
			this.left = this.pos[0]-(this.w/2.0);
			this.top = this.pos[1]-(this.h/2.0);
			
		}else{
			this.alive = false;
		}
		
	}
	
	function drawSpecterInside(){
		
		Graphics2D.Draw.rectangle(this.left-2, this.top-2, this.w+4, this.h+4, 0, 0, 0, this.color[3]);
		
	}
	
	function drawSpecterOutside(){
		
		Graphics2D.Draw.rectangle(this.left, this.top, this.w, this.h, this.color[0], this.color[1], this.color[2], this.color[3]);
		
	}
	
}

class Hole : Wall{
	
	field r;
	
	constructor(p, w, h, color) : base(p, w, h, color){
		this.r = (this.w - 8)/2.0;
	}
	
	function updateHole(){
	
		this.time += DT;
		
		if(this.time > 1 && this.time < 4.0){
			this.color[3] = fade(1.2, this.color[3], true);
		}
		
	}
	
	function drawHole(){
		
		Graphics2D.Draw.ellipse(this.left+4, this.top+4, this.w-8, this.h-8, this.color[0], this.color[1], this.color[2], this.color[3]);
		
	}
	
}