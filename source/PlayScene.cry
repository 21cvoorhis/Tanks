import Graphics2D;
import Graphics2DText;
import Math;
import Random;
import Resources;
import TwoCansAlpha4;

//default settings for a given tank parameter
const VEL = 75.0;
const MAX_SHOT_TIME = 4.0;
const MAX_BULLETS = 5;
const BULLET_SPEED = 150.0;
const FAST_BULLET_SPEED = 250.0;
const BULLET_BOUNCES = 1;
const MAX_PLANT_TIME = 3.0;
const MAX_MINES = 2;
const MINE_TIME = 10.0;

enum ShotType { NONE, DIRECT, BANKED, LEAD }
enum PlantType { NONE, YES }
enum MoveType { NONE, DIRECT, RANDOM, NORMAL, DISTANCE }

function tileToIndex(t){
	if(Math.ensureRange(0, 14, t[0]) == t[0] && Math.ensureRange(0, 10, t[1]) == t[1]){
		return t[0] + t[1] * 15;
	}else{
		return null;
	}
}
function tileToPos(t){
	return [40.0+40*(t[0]), 40.0+40*(t[1])];
}
function posToTile(p){
	t = [(p[0]-40.0)/40, (p[1]-40.0)/40];
	for(i = 0; i<t.length; i++){
		dec = t[i] - Math.floor(t[i]);
		if(dec < 0.5){
			t[i] = Math.floor(t[i]);
		}else{
			t[i] = Math.floor(t[i]) + 1;
		}
	}
	return t;
}

function findNode(tile, nodes){
	try{
		n = nodes[tileToIndex(tile)];
		return n;
	}catch(Core.KeyNotFoundException){
		return null;
	}
}

function findHole(tile, holes){
	try{
		h = holes[tileToIndex(tile)];
		return h;
	}catch(Core.KeyNotFoundException){
		return null;
	}
}

class PlayScene : AbstractScene {
	
	field player;
	field playerWon = false;
	field lives;
	field tanks = []; //list of all the tanks
	field deadTankTiles = [];
	field tankSpecters = [];
	
	field fileName;
	field levelNames;
	field levelIndex;
	
	field mapText;
	field wallMapText; //doc but only the walls, for pathfinding
	
	field tutorial = false;
	field tutorialText = [];
	field fakeTanks = [];
	field fakeBullet;
	field fakeMine;
	field fakeAlpha = 0;
	
	field nodes;
	
	field walls = [];
	field deadWallTiles = [];
	field wallSegments = [];
	field wallSegmentsDict = {}; //all the segments that touch a given tile
	field wallSpecters = [];
	
	field holes = {};
	field holesDict = {}; //all the holes surronding a given tile, including the current tile
	field holeSegments = [];
	
	field mousePos;
	
	field startSceneTimeLeft = 3.5;
	field sceneChangeTimeLeft = 1.5;
	field pause = false;
	field rgbShift;
	
	constructor(levelNames, rgbShift, levelIndex, lives, deadTankTiles, deadWallTiles) : base() {
		
		this.levelNames = levelNames;
		this.rgbShift = rgbShift;
		this.levelIndex = levelIndex;
		this.lives = lives;
		this.deadTankTiles = deadTankTiles;
		this.deadWallTiles = deadWallTiles;
		
		this.fileName = "levels/" + this.levelNames[this.levelIndex] + ".txt";
		if(listsEqual(this.levelNames[this.levelIndex], "!tutorial")){
			this.getTutorial();
		}
		
		//border walls
		this.walls.add(new Wall([0.0,0.0], 20.0, HEIGHT*1.0, backColorShift(rgbShift, -64, -64, -64, false)));
		this.walls.add(new Wall([WIDTH-20.0,0.0], 20.0, HEIGHT*1.0, backColorShift(rgbShift, -64, -64, -64, false)));
		this.walls.add(new Wall([0,0], WIDTH*1.0, 20.0, backColorShift(rgbShift, -64, -64, -64, false)));
		this.walls.add(new Wall([0.0,HEIGHT-20.0], WIDTH*1.0, 20.0, backColorShift(rgbShift, -64, -64, -64, false)));
		
		this.getMapText(this.fileName);
		//new BadTank(pos, radius, color, vel, |||shotType|||, maxShotTime, maxBullets, bulletSpeed, bulletBounces, |||plantType|||, maxPlantTime, maxMines, mineTime, moveType)
		for(i = 0; i<this.mapText.length; i++){
			switch(this.mapText[i]){
				case 'W':
					this.walls.add(new Wall([20.0+40*(i%15), 20.0+40*Math.floor(i/15)], 40.0, 40.0, backColorShift(this.rgbShift.clone(), -64, -64, -64, false)));
					break;
				case 'w':
					this.walls.add(new WeakWall([20.0+40*(i%15), 20.0+40*Math.floor(i/15)], 40.0, 40.0, [127+(this.rgbShift[0]/2), 63+(this.rgbShift[1]/2), 0+(this.rgbShift[2]/2), 0]));
					break;
				case 'H':
					this.holes[tileToIndex([i%15, Math.floor(i/15)])] = new Hole([20.0+40*(i%15), 20.0+40*Math.floor(i/15)], 40.0, 40.0, [0, 0, 0, 0]);
					break;
				case 'P':
					this.player = new Tank([40+40*(i%15), 40+40*Math.floor(i/15)], 20.0, [63, 63, 255, 0], this.rgbShift.clone(),
					VEL, 
					MAX_BULLETS, BULLET_SPEED, BULLET_BOUNCES, 
					MAX_MINES, MINE_TIME);
					break;
				case 'b': //nonmoving banked shot
					this.tanks.add(new BadTank([40+40*(i%15), 40+40*Math.floor(i/15)], 20.0, [127, 63, 0, 0], this.rgbShift.clone(),
					MoveType.NONE, VEL, 
					ShotType.BANKED, MAX_SHOT_TIME*1.5, MAX_BULLETS, BULLET_SPEED, BULLET_BOUNCES, 
					PlantType.NONE, MAX_PLANT_TIME, MAX_MINES, MINE_TIME));
					break;
				case 'B': //nonmoving fast banked shot
					this.tanks.add(new BadTank([40+40*(i%15), 40+40*Math.floor(i/15)], 20.0, [0, 127, 127, 0], this.rgbShift.clone(),
					MoveType.NONE, VEL, 
					ShotType.BANKED, MAX_SHOT_TIME, MAX_BULLETS-3, FAST_BULLET_SPEED, BULLET_BOUNCES, 
					PlantType.NONE, MAX_PLANT_TIME, MAX_MINES, MINE_TIME));
					break;
				case 'M': //moving tank with basic attacks
					this.tanks.add(new BadTank([40+40*(i%15), 40+40*Math.floor(i/15)], 20.0, [100, 100, 80, 0], this.rgbShift.clone(),
					MoveType.NORMAL, VEL*0.75, 
					ShotType.DIRECT, MAX_SHOT_TIME, MAX_BULLETS, BULLET_SPEED, BULLET_BOUNCES, 
					PlantType.NONE, MAX_PLANT_TIME, MAX_MINES, MINE_TIME));
					break;
				case 'm': //mine planter
					this.tanks.add(new BadTank([40+40*(i%15), 40+40*Math.floor(i/15)], 20.0, [255, 255, 0, 0], this.rgbShift.clone(),
					MoveType.RANDOM, VEL*(4.0/3.0), 
					ShotType.NONE, MAX_SHOT_TIME, MAX_BULLETS, BULLET_SPEED, BULLET_BOUNCES, 
					PlantType.YES, MAX_PLANT_TIME, MAX_MINES, MINE_TIME));
					break;
				case 'F': //moving tank with fast, 1 bounce shot
					this.tanks.add(new BadTank([40+40*(i%15), 40+40*Math.floor(i/15)], 20.0, [0, 80, 0, 0], this.rgbShift.clone(),
					MoveType.DISTANCE, VEL*0.75, 
					ShotType.DIRECT, MAX_SHOT_TIME, MAX_BULLETS-3, FAST_BULLET_SPEED, BULLET_BOUNCES-1, 
					PlantType.NONE, MAX_PLANT_TIME, MAX_MINES, MINE_TIME));
					break;
				case 'D': //moving tank with the player's attacks
					this.tanks.add(new BadTank([40+40*(i%15), 40+40*Math.floor(i/15)], 20.0, [31, 31, 127, 0], this.rgbShift.clone(),
					MoveType.NORMAL, VEL*0.75, 
					ShotType.DIRECT, MAX_SHOT_TIME, MAX_BULLETS, BULLET_SPEED, BULLET_BOUNCES, 
					PlantType.YES, MAX_PLANT_TIME*1.5, MAX_MINES, MINE_TIME));
					break;
				case 'Z': //moving tank with a fast shot and a faster reload
					this.tanks.add(new BadTank([40+40*(i%15), 40+40*Math.floor(i/15)], 20.0, [191, 63, 63, 0], this.rgbShift.clone(),
					MoveType.DIRECT, VEL*0.8, 
					ShotType.DIRECT, MAX_SHOT_TIME-2.5, MAX_BULLETS-2, FAST_BULLET_SPEED, BULLET_BOUNCES, 
					PlantType.NONE, MAX_PLANT_TIME, MAX_MINES, MINE_TIME));
					break;
				case 'r': //randomly moving tank with a fast banked shot (unused)
					this.tanks.add(new BadTank([40+40*(i%15), 40+40*Math.floor(i/15)], 20.0, [255, 127, 63, 0], this.rgbShift.clone(),
					MoveType.RANDOM, VEL, 
					ShotType.DIRECT, MAX_SHOT_TIME, MAX_BULLETS, FAST_BULLET_SPEED, BULLET_BOUNCES, 
					PlantType.NONE, MAX_PLANT_TIME, MAX_MINES, MINE_TIME));
					break;
				case 'T': //test case, usable for target practice
					this.tanks.add(new BadTank([40+40*(i%15), 40+40*Math.floor(i/15)], 20.0, [127, 127, 127, 0], this.rgbShift.clone(),
					MoveType.NONE, VEL, 
					ShotType.NONE, MAX_SHOT_TIME, MAX_BULLETS, BULLET_SPEED, BULLET_BOUNCES, 
					PlantType.NONE, MAX_PLANT_TIME, MAX_MINES, MINE_TIME));
					break;
			}
		}
		this.tanks.add(this.player);	
		
		this.getWallMapText(this.mapText);
		
		this.findWallSegments();
		
		this.findHolesDict();
		
		holeKeys = this.holes.keys();
		for(i = 0; i < holeKeys.length; i++){
			for(j = 0; j < this.holes[holeKeys[i]].segments.length; j++){
				this.holeSegments.add(this.holes[holeKeys[i]].segments[j]);
			}
		}
		
		this.getNodes();
		
		this.mousePos = [0,0];
		
	}
	
	function getTutorial(){
		
		this.tutorial = true;
		
		font = FontResource.fromSystem("Arial").getRenderer().setSize(12).setColor(0, 0, 0);
		this.tutorialText.add(font.render("W"));
		this.tutorialText.add(font.render("A"));
		this.tutorialText.add(font.render("S"));
		this.tutorialText.add(font.render("D"));
		this.tutorialText.add(font.render("P"));
		this.tutorialText.add(font.render(""));
		
		//pre-pause button: tankPos = [[40+(40*1.25), 40+(40*2)], [40+(40*0.75), 40+(40*6.25)], [40+(40*1.75), 40+(40*9.675)]];
		tankPos = [[40+(40*1.25), 40+(40*2)], [40+(40*0.75), 40+(40*6.25)-30], [40+(40*1.75), 40+(40*8.25)]];
		
		for(i = 0; i < tankPos.length; i++){
			this.fakeTanks.add(new BadTank(tankPos[i], 20.0, [63, 63, 255, 0], this.rgbShift.clone(),
				MoveType.NONE, VEL, 
				ShotType.NONE, MAX_SHOT_TIME, MAX_BULLETS, BULLET_SPEED, BULLET_BOUNCES, 
				PlantType.NONE, MAX_PLANT_TIME, MAX_MINES, MINE_TIME));
		}
		
		this.fakeBullet = new Bullet([40+(40*2.25), 40+(40*6.25)-30], 4.0, [255, 255, 255, this.fakeAlpha], this.rgbShift.clone(), 0, 0, 1, []);
		this.fakeMine = new Mine([40+(40*0.75), 40+(40*8.25)], 20/3.0, [255, 255, 0, this.fakeAlpha], 10000);
		
	}
	
	function getMapText(fileName){
		mapChars = [];
		mapText = "";
		
		fileText = Resources.readText(fileName);
		for(i = 0; i<fileText.length; i++){
			if(fileText[i]!='\n' && fileText[i]!='\r'){
				mapChars.add(fileText[i]);
			}
		}
		
		//remove dead elements from the last life, if any exist
		for(i = 0; i < this.deadTankTiles.length; i++){
			mapChars[tileToIndex(this.deadTankTiles[i])] = '-';
		}
		for(i = 0; i < this.deadWallTiles.length; i++){
			mapChars[tileToIndex(this.deadWallTiles[i])] = '-';
		}
		
		for(i = 0; i < mapChars.length; i++){
			mapText+=mapChars[i];
		}
		this.mapText = mapText;
	}
	
	function getWallMapText(mapText){
		wallMapText = "";
		for(i = 0; i<mapText.length; i++){
			if(mapText[i] == 'W'){
				wallMapText+='W';
			}else{
				wallMapText+='-';
			}
		}
		this.wallMapText = wallMapText;
	}
	
	function getNodes(){
		nodes = {};
		
		for(i = 0; i<this.wallMapText.length; i++){
			if(this.wallMapText[i] != 'W' && this.wallMapText[i] != 'H'){
				nodes[i] = new Node([i%15, Math.floor(i/15)], 1.0);
			}
		}
		
		for(k : nodes.keys()){
			nodes[k].getNeighbors(nodes, this.wallSegments, this.holeSegments);
		}
		
		this.nodes = nodes;
	}
	
	function findWallSegments(){
		
		startList = [];
		
		for(wall : this.walls){
			for(segment : wall.segments){
				startList.add(segment);
			}
		}
		
		uniqueList = [];
		xDict = {}; //these walls face in the x direction but have the same y points. They're sorted in a dictionary by y level
		yDict = {};
		endList = [];
		endDict = {};
		
		duplicate = false;
		
		//find duplicate segments (two walls on top of each other) and remove both of them
		endList = [];
		for(s : startList){
			duplicate = false;
			for(i = 0; i < uniqueList.length; i++){
				if(segmentsEqual(uniqueList[i], s)){
					uniqueList.remove(i);
					duplicate = true;
				}
			}
			if(!duplicate){
				uniqueList.add(s);
			}
		}
		
		//sort points into slope groups
		for(s : uniqueList){
			if(s[0][1] == s[1][1]){
				try{
					xDict[Math.floor(s[0][1])].add(s);
				}catch(Core.KeyNotFoundException){
					xDict[Math.floor(s[0][1])] = [s];
				}
			}else{
				try{
					yDict[Math.floor(s[0][0])].add(s);
				}catch(Core.KeyNotFoundException){
					yDict[Math.floor(s[0][0])] = [s];
				}
			}
		}
		
		//merge each slope group
		intervals = [];
		
		for(y : xDict.keys()){
			for(s : xDict[y]){
				intervals.add([s[0][0], s[1][0]]);
			}
			intervals = mergeIntervals(intervals);
			for(i : intervals){
				endList.add([[i[0], y*1.0],[i[1], y*1.0]]);
			}
			intervals = [];
		}
		
		for(x : yDict.keys()){
			for(s : yDict[x]){
				intervals.add([s[0][1], s[1][1]]);
			}
			intervals = mergeIntervals(intervals);
			for(i : intervals){
				endList.add([[x*1.0,i[0]],[x*1.0, i[1]]]);
			}
			intervals = [];
		}
		
		this.wallSegments = endList;
		
		//find dict
		edges = []; //edges
		for(i = 0; i < 165; i++){
			
			tile = [i%15, Math.floor(i/15)];
			tilePos = tileToPos(tile);
			edges = [
				[tilePos[0] + 20, tilePos[1] + 20], 
				[tilePos[0] + 20, tilePos[1] - 20], 
				[tilePos[0] - 20, tilePos[1] - 20], 
				[tilePos[0] - 20, tilePos[1] + 20]];
			edges = [
				[edges[0], edges[1]], 
				[edges[1], edges[2]], 
				[edges[2], edges[3]], 
				[edges[3], edges[0]]];
			
			for(e : edges){
				
				if(e[0][1] == e[1][1]){
					
					//use x intervals list
					eInterval = [e[0][0], e[1][0]];
					eKey = Math.floor(e[0][1]);
					
					try{
						xList = xDict[eKey].clone();
						for(s : xList){
							sInterval = [s[0][0], s[1][0]];
							if(mergeIntervals([sInterval, eInterval]).length == 1){
								try{
									endDict[i].add(s);
								}catch(Core.KeyNotFoundException){
									endDict[i] = [s];
								}
							}
						}
					}catch(Core.KeyNotFoundException){}
					
				}else{
					
					eInterval = [e[0][1], e[1][1]];
					eKey = Math.floor(e[0][0]);
					
					try{
						yList = yDict[eKey].clone();
						for(s : yList){
							sInterval = [s[0][1], s[1][1]];
							if(mergeIntervals([sInterval, eInterval]).length == 1){
								try{
									endDict[i].add(s);
								}catch(Core.KeyNotFoundException){
									endDict[i] = [s];
								}
							}
						}
					}catch(Core.KeyNotFoundException){}
					
				}
			}
		}
		
		this.wallSegmentsDict = endDict;
		
	}
	
	function findHolesDict(){
		
		dict = {};
		dirs = [[0,0], [1,0], [0,1], [-1,0], [0,-1], [1,1], [-1,1], [-1,-1], [1,-1]];
		
		for(i = 0; i < 165; i++){
			tile = [i%15, Math.floor(i/15)];
			for(d : dirs){
				neighbor = [tile[0] + d[0], tile[1] + d[1]];
				if(tileToIndex(neighbor) != null && findHole(neighbor, this.holes) != null){
					h = findHole(neighbor, this.holes);
					try{
						dict[i].add(h);
					}catch(Core.KeyNotFoundException){
						dict[i] = [h];
					}
				}
			}
		}
		
		this.holesDict = dict;
		
	}
	
	function tanksCollisions(){
		
		for(t : this.tanks){
			t.tankCollision = false;
		}
		
		collisionCount = 1;
		while(collisionCount>0){
			collisionCount = 0;
			for(i = 0; i<this.tanks.length; i++){
				for(j = i+1; j<this.tanks.length; j++){
					
					t0 = this.tanks[i];
					t1 = this.tanks[j];
					
					if(t0.alive && t1.alive && circleCircleCollision(t0.pos, t0.collisionR, t1.pos, t1.collisionR)){
						a2b = pointDistance(t0.pos[0], t0.pos[1], t1.pos[0], t1.pos[1]);
						overlap = (t0.collisionR + t1.collisionR) - a2b;
						if(Math.abs(overlap) > 0.001){
							t0.prevPos = t0.pos.clone();
							t1.prevPos = t1.pos.clone();
							normalizedX = (t1.pos[0] - t0.pos[0])/a2b;
							normalizedY = (t1.pos[1] - t0.pos[1])/a2b;
							t0.pos[0] -= normalizedX*overlap + randomInt(-100, 100) / 200.0;
							t0.pos[1] -= normalizedY*overlap + randomInt(-100, 100) / 200.0;
							t0.tankCollision = true;
							t1.tankCollision = true;
							t1.pos[0] += normalizedX*overlap + randomInt(-100, 100) / 200.0;
							t1.pos[1] += normalizedY*overlap + randomInt(-100, 100) / 200.0;
							collisionCount++;
						}
					}
				}
			}
			for(t : this.tanks){
				t.bodyCollisionWalls(this.wallSegmentsDict, this.holesDict);
				if(t.wallCollision){
					collisionCount++;
				}
			}
			
		}
	}
	
	function playerWonCheck(){
		
		if(!this.player.alive){
			return false;
		}
		
		tanksLeft = this.tanks.length;
		
		for(t : this.tanks){
			if(!t.alive){
				tanksLeft--;
			}
		}
		
		if(tanksLeft == 1){
			this.playerWon = true;
			return true;
		}
		
		return false;
		
	}
	
	function updateWalls(){
		
		for(i = 0; i < this.walls.length; i++){
			if(this.walls[i].weak){
				this.walls[i].updateWeakWall(this.tanks, this.wallSpecters);
			}else{
				this.walls[i].updateWall();
			}
		}
		
		for(i = 0; i < this.walls.length; i++){
			if(!this.walls[i].alive){
			
				tile = this.walls[i].tile.clone();
				node = new Node(tile, 1.0);
				
				this.deadWallTiles.add(this.walls[i].tile.clone());
				this.walls.remove(i);
				this.findWallSegments();
				
				this.nodes[tileToIndex(tile)] = node;
				node.getNeighbors(this.nodes, this.wallSegments, this.holeSegments);
				
				for(n : node.neighbors){
					n.getNeighbors(this.nodes, this.wallSegments, this.holeSegments);
				}
				
			}
		}
		
		for(i = 0; i < this.wallSpecters.length; i++){
			this.wallSpecters[i].updateSpecter();
		}
		
		for(i = 0; i < this.wallSpecters.length; i++){
			if(!this.wallSpecters[i].alive){
				this.wallSpecters.remove(i);
			}
		}
		
	}
	
	function update(inputManager, events) {
		
		//check for pausing
		if(inputManager.isKeyPressedThisFrame(KeyboardKey.P) || inputManager.isKeyPressedThisFrame(KeyboardKey.ESCAPE)){
			this.pause = !this.pause;
		}
		if(this.pause){
			return;
		}
		
		this.updateWalls();
		
		holeKeys = this.holes.keys();
		for(i = 0; i < holeKeys.length; i++){
			this.holes[holeKeys[i]].updateHole();
		}
		
		if(this.startSceneTimeLeft > 0){
		
			this.startSceneTimeLeft -= DT;
			
			for(t : this.tanks){
				t.updateObject();
			}
			return;
		}
		
		if(this.playerWon || this.playerWonCheck()){
			this.sceneChangeTimeLeft -= DT;
			if(this.sceneChangeTimeLeft <= 0){
				if(this.levelIndex < this.levelNames.length-1){
					if(this.levelIndex%5 == 4){
						this.switchSceneFade(new ExtraLifeScene(this.levelNames, ++this.levelIndex, this.lives, [], []));
					}else{
						this.switchSceneFade(new IntroScene(this.levelNames, this.rgbShift, ++this.levelIndex, this.lives, [], []));
					}
				}else{
					if(!this.tutorial){
						this.switchSceneFade(new WinScene());
					}else{
						this.switchSceneFade(new TitleScene(this.rgbShift.clone()));
					}
				}
			}
		}
		
		if(!this.player.alive){
		
			this.sceneChangeTimeLeft -= DT;
			
			if(this.sceneChangeTimeLeft <= 0){
				
				if(this.lives > 0){
					for(i = 0; i<this.tanks.length-1; i++){
						if(!this.tanks[i].alive){
							this.deadTankTiles.add(this.tanks[i].initialTile.clone());
						}
					}
					this.switchSceneFade(new IntroScene(this.levelNames, this.rgbShift, this.levelIndex, --this.lives, this.deadTankTiles, this.deadWallTiles));
				}else{
					this.switchSceneFade(new TitleScene(this.rgbShift));
				}
				
			}
			
		}
		
		this.mousePos = inputManager.getMousePosition();
		
		//player movement
		this.player.target[0] = 0;
		this.player.target[1] = 0;
		if(inputManager.isKeyPressed(KeyboardKey.LEFT) || inputManager.isKeyPressed(KeyboardKey.A)) {
			this.player.target[0]--;
		}
		if(inputManager.isKeyPressed(KeyboardKey.RIGHT) || inputManager.isKeyPressed(KeyboardKey.D)) {
			this.player.target[0]++;
		}
		if(inputManager.isKeyPressed(KeyboardKey.UP) || inputManager.isKeyPressed(KeyboardKey.W)) {
			this.player.target[1]--;
		}
		if(inputManager.isKeyPressed(KeyboardKey.DOWN) || inputManager.isKeyPressed(KeyboardKey.S)) {
			this.player.target[1]++;
		}
		if(inputManager.isKeyPressedThisFrame(KeyboardKey.SPACE) && !this.playerWon) {
			if(this.player.alive){
				this.player.plant();
			}
		}
		
		if(!((this.player.target[0]==0) && (this.player.target[1]==0))){ //if there is a velocity input
			this.player.vAngle = Math.arctan(this.player.target[1], this.player.target[0]);
		}else{
			this.player.vAngle = null;
		}
		
		this.player.gAngle = Math.arctan(this.mousePos[1]-this.player.pos[1], this.mousePos[0]-this.player.pos[0]);
		
		for (event : events) {
			switch (event.type) {
				case EventType.MOUSE_PRESS:
					if(this.player.alive && !this.playerWon){
						this.player.shoot(this.walls);
					}
					break;
			}
		}
		
		/*
		All elements of the tanks have to be updated in groups to keep collision information correct, and in this order because they can cause a chain reaction.
		Also, all positions need to be calculated before any collisions.
		Specters are kind of an exception, since they don't interact with anything, they don't effect things badly.
		I'd love to use for(tank : this.tanks) instead of the standard for loops, but it can throw errors if there are no tanks, bullets, etc.
		Overall, I hate how this code looks and it feels highly inefficient, but it's the best I could come up with that doesn't throw errors everywhere.
		*/
		
		//update object data
		for(i = 0; i<this.tanks.length; i++){
			
			if(this.tanks[i].alive){
				this.tanks[i].updateObject();
			}
			for(j = 0; j<this.tanks[i].bullets.length; j++){
				this.tanks[i].bullets[j].updateObject();
			}
			for(j = 0; j<this.tanks[i].mines.length; j++){
				this.tanks[i].mines[j].updateObject();
			}
			for(j = 0; j<this.tanks[i].explosions.length; j++){
				this.tanks[i].explosions[j].updateObject();
			}
			for(j = 0; j<this.tanks[i].specters.length; j++){
				this.tanks[i].specters[j].updateObject();
			}
		}
		
		for(i = 0; i<this.tanks.length; i++){
			for(j = 0; j<this.tanks[i].bullets.length; j++){
				this.tanks[i].bullets[j].updateBullet(this.wallSegmentsDict, this.tanks, this.holes);
			}
		}
		for(i = 0; i<this.tanks.length; i++){
			for(j = 0; j<this.tanks[i].mines.length; j++){
				this.tanks[i].mines[j].updateMine(this.tanks);
			}
		}
		for(i = 0; i<this.tanks.length; i++){
			for(j = 0; j<this.tanks[i].explosions.length; j++){
				this.tanks[i].explosions[j].updateExplosion();
			}
		}
		for(i = 0; i<this.tanks.length; i++){
			for(j = 0; j<this.tanks[i].specters.length; j++){
				this.tanks[i].specters[j].updateSpecter(this.tanks);
			}
		}
		for(i = 0; i<this.tanks.length-1; i++){
			if(this.tanks[i].alive){
				this.tanks[i].updateBadTank(this.walls, this.wallSegments, this.wallSegmentsDict, this.holesDict, this.tanks, this.tankSpecters, this.nodes);
			}
		}
		if(this.player.alive){
			this.player.updateTank(this.walls, this.wallSegmentsDict, this.holesDict, this.tanks, this.tankSpecters, this.playerWon);
		}
		
		this.tanksCollisions();
		
		for(i = 0; i < this.tankSpecters.length; i++){
			this.tankSpecters[i].updateSpecter();
		}
		
		for(i = 0; i < this.tankSpecters.length; i++){
			if(!this.tankSpecters[i].alive){
				this.tankSpecters.remove(i);
			}
		}
		
		//update object lists
		for(i = 0; i<this.tanks.length; i++){
			tank = this.tanks[i];
			for(j = 0; j<tank.bullets.length; j++){
				if(!tank.bullets[j].alive || this.playerWon){
					if(tank.bullets[j].explode || this.playerWon){
						tank.explosions.add(new Explosion(tank.bullets[j].pos.clone(), tank.bulletR*2.0, [255, 0, 0, 255], [255, 127, 0, 255]));
					}
					tank.bullets.remove(j);
				}
			}
			for(j = 0; j<tank.specters.length; j++){
				if(!tank.specters[j].alive){
					tank.specters.remove(j);
				}
			}
			for(j = 0; j<tank.mines.length; j++){
				if(!tank.mines[j].alive || this.playerWon){
					tank.explosions.add(new Explosion(tank.mines[j].pos.clone(), tank.mineR*8.0, [255, 0, 0, 255], [255, 127, 0, 255]));
					tank.mines.remove(j);
				}
			}
			for(j = 0; j<tank.explosions.length; j++){
				if(!tank.explosions[j].alive){
					tank.explosions.remove(j);
				}
			}
			
			if(!tank.alive && (i != this.tanks.length-1) && tank.bullets.length == 0 && tank.mines.length == 0 && tank.explosions.length == 0 && tank.specters.length == 0){
				this.deadTankTiles.add(this.tanks[i].initialTile.clone());
				this.tanks.remove(i);
			}
		}
		
	}
	
	function tutorialDraw(){
		
		for(i = 0; i < this.fakeTanks.length; i++){
			this.fakeTanks[i].updateObject();
			this.fakeTanks[i].drawTank(false);
		}
		
		if(this.startSceneTimeLeft < 1.5 && this.startSceneTimeLeft > 0){
			this.fakeAlpha = fade(1.2, this.fakeAlpha, true);
			this.fakeBullet.color[3] = this.fakeAlpha;
			this.fakeMine.color[3] = this.fakeAlpha;
		}
		
		this.fakeBullet.drawBullet();
		this.fakeMine.drawMine();
		
		//draw wasd
		keycapPos = [
		[40+(40*1.25), 40+(40*0)],
		[40+(40*0.35), 40+(40*0.9)],
		[40+(40*1.25), 40+(40*0.9)],
		[40+(40*2.15), 40+(40*0.9)],
		[40+(40*0.35), 40+(40*9.75)],
		[40+(40*2.15), 40+(40*9.75)],
		]; //add a P key and a pause button to these
		
		for(i = 0; i < keycapPos.length; i++){
			
			pos = [keycapPos[i][0], keycapPos[i][1]];
			text = this.tutorialText[i];
			
			Graphics2D.Draw.rectangle(pos[0]-15, pos[1]-15, 30, 30, 0, 0, 0, this.fakeAlpha);
			Graphics2D.Draw.rectangle(pos[0]-13, pos[1]-13, 26, 26, 127, 127, 127, this.fakeAlpha);
			text.drawWithAlpha(Math.floor(pos[0]-(text.width/2)-1), Math.floor(pos[1]-(text.height/2)+1), Math.floor(this.fakeAlpha));
			
		}
		
		/*
		pre-pause button
		//draw mouse
		Graphics2D.Draw.ellipse(40+(40*1.25)-22, 40+(40*3.95)-22, 44, 44, 0, 0, 0, this.fakeAlpha);
		Graphics2D.Draw.ellipse(40+(40*1.25)-22, 40+(40*4.55)-22, 44, 44, 0, 0, 0, this.fakeAlpha);
		Graphics2D.Draw.rectangle(40+(40*1.25)-22, 40+(40*3.95), 43, 28, 0, 0, 0, this.fakeAlpha);
		
		Graphics2D.Draw.ellipse(40+(40*1.25)-20, 40+(40*3.95)-20, 40, 40, 127, 127, 127, this.fakeAlpha);
		Graphics2D.Draw.ellipse(40+(40*1.25)-20, 40+(40*4.55)-20, 40, 40, 127, 127, 127, this.fakeAlpha);
		Graphics2D.Draw.rectangle(40+(40*1.25)-20, 40+(40*3.95), 39, 24, 127, 127, 127, this.fakeAlpha);
		
		Graphics2D.Draw.ellipse(40+(40*1.25)-16, 40+(40*3.95)-16, 28, 28, BR-64+this.rgbShift[0], BG-64+this.rgbShift[1], BB-64+this.rgbShift[2], this.fakeAlpha);
		Graphics2D.Draw.rectangle(40+(40*1.25)-3, 40+(40*3.95)-16, 15, 28, 127, 127, 127, this.fakeAlpha);
		Graphics2D.Draw.rectangle(40+(40*1.25)-16, 40+(40*3.95)-3, 28, 15, 127, 127, 127, this.fakeAlpha);
		
		Graphics2D.Draw.line(40+(40*1.25), 40+(40*3.95)-20, 40+(40*1.25), 40+(40*3.95), 2, 0, 0, 0, this.fakeAlpha);
		Graphics2D.Draw.line(40+(40*1.25)-22, 40+(40*3.95), 40+(40*1.25)+22, 40+(40*3.95), 2, 0, 0, 0, this.fakeAlpha);
		
		//draw space bar
		Graphics2D.Draw.rectangle(40+(40*1.25)-60, 40+(40*8.375)-15, 120, 30, 0, 0, 0, this.fakeAlpha);
		Graphics2D.Draw.rectangle(40+(40*1.25)-58, 40+(40*8.375)-13, 116, 26, 127, 127, 127, this.fakeAlpha);
		*/
		
		//draw mouse
		Graphics2D.Draw.ellipse(40+(40*1.25)-22, 40+(40*3.95)-42, 44, 44, 0, 0, 0, this.fakeAlpha);
		Graphics2D.Draw.ellipse(40+(40*1.25)-22, 40+(40*4.55)-42, 44, 44, 0, 0, 0, this.fakeAlpha);
		Graphics2D.Draw.rectangle(40+(40*1.25)-22, 40+(40*3.95)-20, 43, 28, 0, 0, 0, this.fakeAlpha);
		
		Graphics2D.Draw.ellipse(40+(40*1.25)-20, 40+(40*3.95)-40, 40, 40, 127, 127, 127, this.fakeAlpha);
		Graphics2D.Draw.ellipse(40+(40*1.25)-20, 40+(40*4.55)-40, 40, 40, 127, 127, 127, this.fakeAlpha);
		Graphics2D.Draw.rectangle(40+(40*1.25)-20, 40+(40*3.95)-20, 39, 24, 127, 127, 127, this.fakeAlpha);
		
		Graphics2D.Draw.ellipse(40+(40*1.25)-16, 40+(40*3.95)-36, 28, 28, BR-64+this.rgbShift[0], BG-64+this.rgbShift[1], BB-64+this.rgbShift[2], this.fakeAlpha);
		Graphics2D.Draw.rectangle(40+(40*1.25)-3, 40+(40*3.95)-36, 15, 28, 127, 127, 127, this.fakeAlpha);
		Graphics2D.Draw.rectangle(40+(40*1.25)-16, 40+(40*3.95)-23, 28, 15, 127, 127, 127, this.fakeAlpha);
		
		Graphics2D.Draw.line(40+(40*1.25), 40+(40*3.95)-40, 40+(40*1.25), 40+(40*3.95)-20, 2, 0, 0, 0, this.fakeAlpha);
		Graphics2D.Draw.line(40+(40*1.25)-22, 40+(40*3.95)-20, 40+(40*1.25)+22, 40+(40*3.95)-20, 2, 0, 0, 0, this.fakeAlpha);
		
		//draw space bar
		Graphics2D.Draw.rectangle(40+(40*1.25)-60, 40+(40*7)-15, 120, 30, 0, 0, 0, this.fakeAlpha);
		Graphics2D.Draw.rectangle(40+(40*1.25)-58, 40+(40*7)-13, 116, 26, 127, 127, 127, this.fakeAlpha);
		
		//draw pause button icon
		Graphics2D.Draw.rectangle(keycapPos[5][0]-7, keycapPos[5][1]-10, 5, 20, 0, 0, 0, this.fakeAlpha);
		Graphics2D.Draw.rectangle(keycapPos[5][0]+2, keycapPos[5][1]-10, 5, 20, 0, 0, 0, this.fakeAlpha);
		
		//draw arrow between p key and pause icon
		Graphics2D.Draw.rectangle(40+(40*1.25)-13, 40+(40*9.75)-5, 24, 10, 0, 0, 0, this.fakeAlpha);
		Graphics2D.Draw.triangle(40+(40*1.25)+17, 40+(40*9.75), 40+(40*1.25)+7, 40+(40*9.75)-10, 40+(40*1.25)+7, 40+(40*9.75)+10, 0, 0, 0, this.fakeAlpha);
		Graphics2D.Draw.rectangle(40+(40*1.25)-11, 40+(40*9.75)-3, 20, 6, 127, 127, 127, this.fakeAlpha);
		Graphics2D.Draw.triangle(40+(40*1.25)+15, 40+(40*9.75), 40+(40*1.25)+8, 40+(40*9.75)-7, 40+(40*1.25)+8, 40+(40*9.75)+7, 127, 127, 127, this.fakeAlpha);
		
	}
	
	function render(){
		
		Graphics2D.Draw.fill(BR+this.rgbShift[0], BG+this.rgbShift[1], BB+this.rgbShift[2]);
		
		//draw the lines in the background
		lines = 24;
		if(this.levelIndex%2 == 0){
			for(i = 1; i < lines; i++){
				h = ((HEIGHT/lines) * i);
				if(this.startSceneTimeLeft > 0){
					right = (3.5-this.startSceneTimeLeft) * (WIDTH) - (40*i);
				}else{
					right = WIDTH;
				}
				Graphics2D.Draw.line(0, h, right, h, 10, BR-2+this.rgbShift[0], BG-2+this.rgbShift[1], BB-2+this.rgbShift[2]);
			}
		}else{
			for(i = 1; i < lines; i++){
				h = ((HEIGHT/lines) * i);
				if(this.startSceneTimeLeft > 0){
					left =  WIDTH - ((3.5-this.startSceneTimeLeft) * (WIDTH) - (40*(lines-i)));
				}else{
					left = 0;
				}
				Graphics2D.Draw.line(left, h, 640, h, 10, BR-2+this.rgbShift[0], BG-2+this.rgbShift[1], BB-2+this.rgbShift[2]);
			}
		}
		
		for(i = 0; i<this.tanks.length; i++){
			for(j = 0; j<this.tanks[i].specters.length; j++){
				this.tanks[i].specters[j].drawSpecter();
			}
		}
		for(i = 0; i<this.wallSpecters.length; i++){
			this.wallSpecters[i].drawSpecterInside();
			this.wallSpecters[i].drawSpecterOutside();
		}
		holeKeys = this.holes.keys();
		for(i = 0; i < holeKeys.length; i++){
			this.holes[holeKeys[i]].drawHole();
		}
		for(i = 0; i<this.tankSpecters.length; i++){
			this.tankSpecters[i].drawSpecter();
		}
		for(i = 0; i<this.tanks.length; i++){
			for(j = 0; j<this.tanks[i].explosions.length; j++){
				this.tanks[i].explosions[j].drawExplosion();
			}
		}
		for(i = 0; i<this.tanks.length; i++){
			for(j = 0; j<this.tanks[i].bullets.length; j++){
				this.tanks[i].bullets[j].drawBullet();
			}
		}
		for(i = 0; i<this.tanks.length; i++){
			for(j = 0; j<this.tanks[i].mines.length; j++){
				this.tanks[i].mines[j].drawMine();
			}
		}
		
		for(tank : this.tanks){
			if(tank.alive){
				if(tank != this.player){
					tank.drawTank(false);
				}else{
					tank.drawTank(true);
				}
			}
		}
		
		for(wall : this.walls){
			wall.drawWallOutline();
		}
		for(wall : this.walls){
			wall.drawWallInside();
		}
		
		if(this.tutorial){
			this.tutorialDraw();
		}
		
		if(this.pause){
			pauseDraw();
		}
		//testing
		/*for(s : this.wallSegments){
			Graphics2D.Draw.line(s[0][0], s[0][1], s[1][0], s[1][1], 5, 166, 0, 166);
		}
		for(s : this.wallSegments){
			Graphics2D.Draw.ellipse(s[0][0]-5, s[0][1]-5, 10, 10, 0, 255, 0);
			Graphics2D.Draw.ellipse(s[1][0]-5, s[1][1]-5, 10, 10, 0, 255, 0);
		}*/
	}
	
}
