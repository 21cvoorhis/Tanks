import Graphics2D;
import Math;
import Random;
import TwoCansAlpha4;

//note radius is of the box center to the box vertecies (r of hitbox circle and half of the body diagonals)

class Tank : Object{
	
	//body vars
	field bAngle; //angle the body is facing
	field bPoints; //points that make the body's square
	field collisionR; //collision circle's radius for when a quadrelateral formula can't be used
	
	//gun vars
	field gAngle; //angle the gun is facing
	field bullets;
	field bulletR;
	field maxBullets;
	field bulletSpeed;
	field bulletBounces;
	
	//mine vars
	field mines;
	field maxMines;
	field mineR;
	field mineTime;
	field explosions;
	
	constructor(pos, radius, color, vel, maxBullets, bulletSpeed, bulletBounces, maxMines, mineTime) : base(pos, radius, color){
		
		this.vel = vel;
		
		this.bAngle = 0.0;
		this.bPoints = [[], [], [], []];
		tempAngle = 0.0;
		for(i = 0; i < 4; i++){
			tempAngle = ((Math.PI*2)/4) * i + (Math.PI/4) + this.bAngle;
			this.bPoints[i] = [this.pos[0] + (this.r*Math.cos(tempAngle)), this.pos[1] + (this.r*Math.sin(tempAngle))];
		}
		this.collisionR = this.r/(2**0.5);
		
		this.gAngle = 0.0;
		this.bullets = [];
		this.bulletR = this.r/5.0;
		this.maxBullets = maxBullets;
		this.bulletSpeed = bulletSpeed;
		this.bulletBounces = bulletBounces;
		
		this.mines = [];
		this.maxMines = maxMines;
		this.mineR = this.r/3.0;
		this.mineTime = mineTime;
		this.explosions = [];
	}
	
	function updateTank(walls, tanks){
	
		this.bodyCollisionDie(tanks);
		this.bodyCollisionWalls(walls);
		
	}
	
	function shoot(walls){
		if(this.bullets.length < this.maxBullets){
			bx = this.pos[0] + (this.r*cos(this.gAngle));
			by = this.pos[1] + (this.r*sin(this.gAngle));
			if(!this.gCollision([1.3*this.r*cos(this.gAngle) + this.pos[0], 1.3*this.r*sin(this.gAngle) + this.pos[1]], walls)){
				this.bullets.add(new Bullet([bx, by], this.bulletR, [255, 255, 255], this.bulletSpeed, this.gAngle, this.bulletBounces));
			}
		}
	}
	
	function plant(){
		if(this.mines.length < this.maxMines){
			this.mines.add(new Mine(this.pos.clone(), this.mineR, [255, 255, 0], 10));
		}
	}
	
	function bodyCollisionWalls(walls){
		
		pi = this.pos; //position initial
		pb = this.prevPos; //position before
		
		for(i = 0; i<walls.length; i++){
			if(circleRectCollision(pi, this.collisionR, walls[i])){
				//if shifting pos[0] to prevPos[0] will not cause a collision, make that change
				if(!circleRectCollision([pb[0], pi[1]], this.collisionR, walls[i])){
					//this checks for a glitch (catching) that only happens with a down & left input against the seam of 2 walls horizontally next to each other
					if((i<walls.length-1) && (walls[i].right == walls[i+1].left) && !circleRectCollision([pi[0], pb[1]], this.collisionR, walls[i])){
						this.pos[1] = this.prevPos[1];
					}else{
						this.pos[0] = this.prevPos[0];
					}
				}else if(!circleRectCollision([pi[0], pb[1]], this.collisionR, walls[i])){
					this.pos[1] = this.prevPos[1];
				}else{
					this.pos[0] = this.prevPos[0];
					this.pos[1] = this.prevPos[1];
				}
			}
		}
	}
	
	//most objects create an explosion when removed from the list, the tank does it here because they aren't removed from the list, so their elements can still be updated
	function bodyCollisionDie(tanks){
		for(i = 0; i<tanks.length; i++){
			for(j = 0; j<tanks[i].bullets.length; j++){
				if(pointQuadCollision(tanks[i].bullets[j].pos, this.bPoints)){
					this.explosions.add(new Explosion(this.pos.clone(), this.r*1.2, [255, 0, 0], [255, 127, 0]));
					this.alive = false;
					return null;
				}
			}
			for(j = 0; j<tanks[i].explosions.length; j++){
				if(circleCircleCollision(this.pos, this.collisionR, tanks[i].explosions[j].pos, tanks[i].explosions[j].r) && tanks[i].explosions[j].timeLeft >= tanks[i].explosions[j].killTime){
					this.explosions.add(new Explosion(this.pos.clone(), this.r*1.2, [255, 0, 0], [255, 127, 0]));
					this.alive = false;
					return null;
				}
			}
		}
	}
	
	function gCollision(pos, walls){
		for(wall : walls){
			if(pointRectCollision(pos, wall)){
				return true;
			}
		}
		return false;
	}
	
	function drawTank(){ //also updates all sets of body points
		
		targetAngle = this.vAngle;
		tempAngle = 0.0;
		outlinePoints = [[],[],[],[]];
		gPoints = [[],[],[],[]];
		
		if(this.motion){
			this.bAngle = smoothRotate(this.bAngle, targetAngle);
		}	
			
		for(i = 0; i < 4; i++){
			tempAngle = ((Math.PI*2)/4) * i + (Math.PI/4) + this.bAngle;
			this.bPoints[i] = [this.pos[0] + (this.r*Math.cos(tempAngle)), this.pos[1] + (this.r*Math.sin(tempAngle))];
			outlinePoints[i] = [this.pos[0] + (this.r*Math.cos(tempAngle)*1.1), this.pos[1] + (this.r*Math.sin(tempAngle)*1.1)];
		}
		
		tempAngle = this.gAngle + (Math.PI/2);
		gPoints[0] = [(0.2*this.r*cos(tempAngle)) + this.pos[0], (0.2*this.r*sin(tempAngle)) + this.pos[1]];
		gPoints[1] = [(-0.2*this.r*cos(tempAngle)) + this.pos[0], (-0.2*this.r*sin(tempAngle)) + this.pos[1]];
		
		tempAngle = this.gAngle;
		gPoints[2] = [(1.25*this.r*cos(tempAngle)) + gPoints[1][0], (1.25*this.r*sin(tempAngle)) + gPoints[1][1]];
		gPoints[3] = [(1.25*this.r*cos(tempAngle)) + gPoints[0][0], (1.25*this.r*sin(tempAngle)) + gPoints[0][1]];
		
		//body
		Graphics2D.Draw.quad(outlinePoints[0][0], outlinePoints[0][1], outlinePoints[1][0], outlinePoints[1][1], outlinePoints[2][0], outlinePoints[2][1], outlinePoints[3][0], outlinePoints[3][1], 0, 0, 0);
		Graphics2D.Draw.quad(this.bPoints[0][0], this.bPoints[0][1], this.bPoints[1][0], this.bPoints[1][1], this.bPoints[2][0], this.bPoints[2][1], this.bPoints[3][0], this.bPoints[3][1], this.color[0], this.color[1], this.color[2]);
		//gun
		Graphics2D.Draw.quad(gPoints[0][0], gPoints[0][1], gPoints[1][0], gPoints[1][1], gPoints[2][0], gPoints[2][1], gPoints[3][0], gPoints[3][1], 0, 0, 0);
		//circle turret
		Graphics2D.Draw.ellipse(this.pos[0]-(this.r*0.6), this.pos[1]-(this.r*0.6), this.r*1.2, this.r*1.2, 0, 0, 0);
		Graphics2D.Draw.ellipse(this.pos[0]-(this.r*0.5), this.pos[1]-(this.r*0.5), this.r, this.r, this.color[0], this.color[1], this.color[2]);
		
	}
	
}