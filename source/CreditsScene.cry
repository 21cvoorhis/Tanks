import Graphics2D;
import Graphics2DText;
import Math;
import TwoCansAlpha4;

class Credit{
	
	field index;
	field text = [];
	field textPos = [];
	field alpha;
	
	constructor(index, text){
		
		this.index = index;
		
		this.text.add(FontResource.fromSystem("Bahnschrift").getRenderer().setSize(20).setColor(0, 0, 0).render(text[0]));
		this.textPos.add([(WIDTH/2) - (this.text[0].width/2), ((HEIGHT/4)*(this.index%2)) + (7*(HEIGHT/16)) - (this.text[0].height/2)]);
		
		for(i = 1; i<text.length; i++){
			
			this.text.add(FontResource.fromSystem("Bahnschrift").getRenderer().setSize(12).setColor(0, 0, 0).render(text[i]));
			this.textPos.add([(WIDTH/2) - (this.text[i].width/2), this.textPos[i-1][1] + this.text[i-1].height]);
			
		}
		
		if(this.index < 2){
			this.alpha = 255;
		}else{
			this.alpha = 0;
		}
		
	}
	
	function drawCredit(){
		for(i = 0; i < this.text.length; i++){
			this.text[i].drawWithAlpha(this.textPos[i][0], this.textPos[i][1], Math.floor(this.alpha));
		}
	}

}

class CreditsScene : AbstractScene{
	
	field time = 0;
	
	field rgbShift;
	field rainbowActive = false;
	
	field bOffset = 0;
	
	field titleText;
	field titleAlpha = 255;
	field switchTitleActive = false;
	
	field credits;
	field creditsLeft;
	field creditsIndex = 0;
	field switchCreditsActive = false;
	field switchTimeLeft = 10.0;
	
	constructor(rgbShift) : base(){
		
		this.rgbShift = rgbShift.clone();
		if(this.rgbShift[0] == 1){
			this.rainbowActive = true;
			this.rgbShift = [63, 0, 64];
		}
		
		this.titleText = FontResource.fromSystem("Arial").getRenderer().setSize(32).setColor(0, 0, 0).setStyle(Graphics2DText.FontStyle.BOLD).render("Credits");
		
		this.credits = [
		new Credit(0, ["Colin Voorhis", "Game Creator"]),
		new Credit(1, ["Blake O\\\'Hare", "Crayon Creator & Debug Help"]),
		new Credit(2, ["Jonathan Sharman (Hydrogen777)", "Created Disentangle and Causal Oops, which were invaluble", "references in dechipering Crayon's syntax"]),
		new Credit(3, ["Eric Dot Com", "Created Foom, which served as another useful Crayon reference"]),
		new Credit(4, ["Jeffery Thompson", "Basis of the point-segment collision detection algorithms", "jeffreythompson.org/collision-detection/"]),
		new Credit(5, ["GeeksforGeeks", "Basis of the segment-segment collision algorithm", "geeksforgeeks.org/check-if-two-given-line-segments-intersect/"]),
		new Credit(6, ["Lauren Law", "Listening to my various Tanks related rants,", "and being supportive in all my endeavors"]),
		new Credit(7, ["Todd Hickerson", "Discussing  possible  mechanics and implementations for hours,", "sometimes to the detriment of family get-togethers"]),
		new Credit(8, ["Noah Charlton", "Lots of code discussions, and generally useful", "coding advice/affirmations"]),
		new Credit(9, ["Aidan & Bridget Voorhis", "Playtesting, and messing around with the beta"]),
		new Credit(10, ["You, the player!", ""]),
		new Credit(11, ["Thanks for playing!", ""]),
		];
		
		this.creditsLeft = this.credits.length/2.0;
		if(this.creditsLeft == Math.floor(this.creditsLeft)*1.0){
			this.creditsLeft--;
		}
		this.creditsLeft = Math.floor(this.creditsLeft);
		
	}
	
	function switchCredits(){
		
		fadeTime = 0.75;
		
		if(this.credits[this.creditsIndex-2].alpha > 0){
			
			this.credits[this.creditsIndex-2].alpha = fade(fadeTime, this.credits[this.creditsIndex-2].alpha, false);
			this.credits[this.creditsIndex-1].alpha = fade(fadeTime, this.credits[this.creditsIndex-1].alpha, false);
			
			if(this.switchTitleActive){
				this.titleAlpha = fade(fadeTime, this.titleAlpha, false);
			}
			
		}else if(this.credits[this.creditsIndex].alpha < 255){
			
			this.credits[this.creditsIndex].alpha = fade(fadeTime, this.credits[this.creditsIndex].alpha, true);
			
			try{
				this.credits[this.creditsIndex+1].alpha = fade(fadeTime, this.credits[this.creditsIndex+1].alpha, true);
			}catch(Core.IndexOutOfRangeException){}
			
			if(this.switchTitleActive){
				if(this.titleAlpha == 0){
					this.titleText = FontResource.fromSystem("Arial").getRenderer().setSize(32).setColor(0, 0, 0).setStyle(Graphics2DText.FontStyle.BOLD).render("Special Thanks");
				}
				this.titleAlpha = fade(fadeTime, this.titleAlpha, true);
			}
			
		}else{
			this.switchCreditsActive = false;
			this.switchTitleActive = false;
			this.creditsLeft--;
		}
		
	}
	
	function update(inputManager, events){
		
		this.time++;
		this.switchTimeLeft -= DT;
		
		if((inputManager.isKeyPressedThisFrame(KeyboardKey.ENTER) || inputManager.isKeyPressedThisFrame(KeyboardKey.SPACE) || inputManager.didMouseClickHere(0,0, WIDTH, HEIGHT) || this.switchTimeLeft < 0) && !this.switchCreditsActive){
			if(this.creditsIndex == 0){
				this.switchTitleActive = true;
			}
			if(this.creditsLeft > 0){
				this.creditsIndex = this.creditsIndex + 2;
				this.switchCreditsActive = true;
			}else{
				if(this.rainbowActive){
					this.switchSceneFade(new TitleScene([1, 0, 0]));
				}else{
					this.switchSceneFade(new TitleScene(this.rgbShift.clone()));
				}
			}
			this.switchTimeLeft = 10.0;
		}
		
		if(this.rainbowActive && this.time%6 == 0){
			this.rgbShift = rainbowRGBShift(this.rgbShift.clone());
		}
		
		if(this.switchCreditsActive){
			this.switchCredits();
		}
		
	}
	
	function drawCredits(){
		
		w = this.titleText.width;
		h = this.titleText.height;
		
		x0 = (WIDTH/2) - (this.titleText.width/2);
		y0 = 48;
		
		borderDraw(x0, y0, w, h, 24, 16, [this.rgbShift[0]/2, this.rgbShift[1]/2, this.rgbShift[2]/2], Math.floor(this.titleAlpha));
		
		this.titleText.drawWithAlpha(x0, y0, Math.floor(this.titleAlpha));
		
		for(i = 0; i<this.credits.length; i++){
			this.credits[i].drawCredit();
		}
		
	}
	
	function render(){
		
		Graphics2D.Draw.fill(BR+this.rgbShift[0], BG+this.rgbShift[1], BB+this.rgbShift[2]);
		this.bOffset = drawBackgroundDiagonals(this.bOffset, this.rgbShift);
		this.drawCredits();
		
	}
	
}