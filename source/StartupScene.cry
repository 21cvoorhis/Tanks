import Graphics2D;
import Graphics2DText;
import Math;
import Random;
import Resources;
import TwoCansAlpha4;

const BR = 127; //background r
const BG = 127; //background g
const BB = 127; //background b
const DT = (1.0/60.0);
const WIDTH = 640;
const HEIGHT = 480;

//mix functions
function mix(start, end, amount){
	return (1-amount)*start + amount*end;
}

function mixColor(c1, c2, amount){
	r = mix(c1[0], c2[0], amount);
	g = mix(c1[1], c2[1], amount);
	b = mix(c1[2], c2[2], amount);
	try{
		a = c1[3];
		return [r, g, b, a];
	}catch(Core.IndexOutOfRangeException){
		return [r, g, b];
	}
}

function smoothRotate(current, target){ //smoothly interpolate between two angles
	
	if(current == null || target == null){
		return current;
	}
	
	//checks to see if they are further than pi apart, and adjust target by 2pi to be closer to current
	if(Math.abs(current-target) > Math.PI){
		if(target > 0){
			target = target - (2*Math.PI);
		}else{
			target = target + (2*Math.PI);
		}
	}
	
	//uses exponential smoothing with 3 mix values to make the tank turn smoothly
	if(Math.abs(current-target) > Math.PI/4){
		current = mix(current, target, 0.1);
	}else if(Math.abs(current-target) > Math.PI/8){
		current = mix(current, target, 0.2);
	}else if(Math.abs(current-target) > 0.00001){
		current = mix(current, target, 0.3);
	}else{
		current = target;
	}
	
	//adjust bAngle back by 2pi
	if(current>Math.PI){
		return current - 2*Math.PI;
	}else if(current<-Math.PI){
		return current + 2*Math.PI;
	}
	return current;
}

function linearRotate(angle, w){
	
	angle += w;
	
	if(angle>Math.PI){
		angle -= 2*Math.PI;
	}else if(angle<-Math.PI){
		angle += 2*Math.PI;
	}
	
	return angle;
}

//math functions
function triangleArea(x1, y1, x2, y2, x3, y3){
	return Math.abs(((x1*y2)+(x2*y3)+(x3*y1)-(y1*x2)-(y2*x3)-(y3*x1))/2.0);
}

function pointDistance(x1, y1, x2, y2){
	return (((x2-x1)**2) + ((y2-y1)**2))**0.5;
}

//collision functions
function pointRectCollision(point, rect){
	return
		point[0] > rect.left &&
		point[0] < rect.right &&
		point[1] > rect.top &&
		point[1] < rect.bottom;
}

function pointCircleCollision(point, circlePos, circleR) {
	dx = point[0] - circlePos[0];
	dy = point[1] - circlePos[1];
	return dx ** 2 + dy ** 2 < circleR ** 2;
}

function pointSegmentCollision(point, s) {
	
	d1 = (((s[0][0] - point[0])**2) + ((s[0][1] - point[1])**2))**0.5;
	d2 = ((s[1][0] - point[0])**2 + (s[1][1] - point[1])**2)**0.5;
	
	lineLen = (((s[1][0] - s[0][0])**2) + ((s[1][1] - s[0][1])**2))**0.5;
	
	buffer = 0.1;    // higher # = less accurate
	
	if (d1+d2 >= lineLen-buffer && d1+d2 <= lineLen+buffer) {
		return true;
	}
	return false;
}

function pointQuadCollision(point, quad){
	
	qTri1 = triangleArea(quad[0][0], quad[0][1], quad[1][0], quad[1][1], quad[2][0], quad[2][1]);
	qTri2 = triangleArea(quad[2][0], quad[2][1], quad[3][0], quad[3][1], quad[0][0], quad[0][1]);
	quadArea = qTri1 + qTri2;
	
	pArea = 0.0;
	for(i = 0; i<4; i++){
		if(i<3){
			pArea += (triangleArea(point[0], point[1], quad[i][0], quad[i][1], quad[i+1][0], quad[i+1][1]));
		}else{
			pArea += (triangleArea(point[0], point[1], quad[i][0], quad[i][1], quad[0][0], quad[0][1]));
		}
	}
	
	return !(pArea>quadArea);
}

function circleCircleCollision(c1pos, c1r, c2pos, c2r) {
	dx = c1pos[0] - c2pos[0];
	dy = c1pos[1] - c2pos[1];
	return (dx ** 2) + (dy ** 2) < (c1r + c2r) ** 2;
}

function circleRectCollision(circlePos, circleR, rect){
    if (circlePos[0] + circleR < rect["left"]) return false;
    if (circlePos[0] - circleR > rect["right"]) return false;
    if (circlePos[1] + circleR < rect["top"]) return false;
    if (circlePos[1] - circleR > rect["bottom"]) return false;

    dx = null;
    dy = null;
    if (circlePos[0] < rect["left"]) {
        if (circlePos[1] < rect["top"]) {
            dx = circlePos[0] - rect["left"];
            dy = circlePos[1] - rect["top"];
        } else if (circlePos[1] > rect["bottom"]) {
            dx = circlePos[0] - rect["left"];
            dy = circlePos[1] - rect["bottom"];
        }
    } else if (circlePos[0] > rect["right"]) {
        if (circlePos[1] < rect["top"]) {
            dx = circlePos[0] - rect["right"];
            dy = circlePos[1] - rect["top"];
        } else if (circlePos[1] > rect["bottom"]) {
            dx = circlePos[0] - rect["right"];
            dy = circlePos[1] - rect["bottom"];
        }
    }

    if (dx != null) {
        return dx ** 2 + dy ** 2 < circleR ** 2;
    }

    return true;
}

function circleSegmentCollision(circlePos, circleR, s){
	
	inside1 = pointCircleCollision(s[0], circlePos, circleR);
	inside2 = pointCircleCollision(s[1], circlePos, circleR);
	if (inside1 || inside2){
		return true;
	}
	
	distX = s[0][0] - s[1][0];
	distY = s[0][1] - s[1][1];
	len = ((distX*distX) + (distY*distY))**0.5;
	
	// get dot product of the line and circle
	dot = (((circlePos[0]-s[0][0])*(s[1][0]-s[0][0])) + ((circlePos[1]-s[0][1])*(s[1][1]-s[0][1]))) / (len**2);
	
	// find the closest point on the line
	closestX = s[0][0] + (dot * (s[1][0]-s[0][0]));
	closestY = s[0][1] + (dot * (s[1][1]-s[0][1]));
	
	onS = pointSegmentCollision([closestX, closestY], s);
	if (!onS){
		return false;
	}
	
	distX = closestX - circlePos[0];
	distY = closestY - circlePos[1];
	distance = ((distX**2) + (distY**2))**0.5;

	if (distance <= circleR) {
		return true;
	}
	return false;
}

function circleQuadCollision(circlePos, circleR, quad){
	
	if(pointQuadCollision(circlePos, quad)){
		return true;
	}
	
	for(i = 0; i<4; i++){
		if(i<3){
			if(circleSegmentCollision(circlePos, circleR, [quad[i], quad[i+1]])){
				return true;
			}
		}else{
			if(circleSegmentCollision(circlePos, circleR, [quad[i], quad[0]])){
				return true;
			}
		}
	}
	
	return false;
}

function segmentSegmentCollision(s0, s1){ //https://www.geeksforgeeks.org/check-if-two-given-line-segments-intersect/
	
	o1 = orientation(s0[0], s0[1], s1[0]);
	o2 = orientation(s0[0], s0[1], s1[1]);
	o3 = orientation(s1[0], s1[1], s0[0]);
	o4 = orientation(s1[0], s1[1], s0[1]);
	
    // General case
    if(o1 != o2 && o3 != o4){
		return true;
	}
	
    // Special Cases
    if (o1 == 0 && onSegment(s0[0], s1[0], s0[1])){
		return true;
	}
	
    if (o2 == 0 && onSegment(s0[0], s1[1], s0[1])){
		return true;
	}
	
    if (o3 == 0 && onSegment(s1[0], s0[0], s1[1])){
		return true;
	}
	
    if (o4 == 0 && onSegment(s1[0], s0[1], s1[1])){
		return true;
	}
	
    return false; // Doesn't fall in any of the above cases
	
}
function orientation(p0, p1, p2){
	
	val = ((p1[1] - p0[1]) * (p2[0] - p1[0])) - ((p1[0] - p0[0]) * (p2[1] - p1[1]));
	
	if(val == 0){
		return 0; //collinear
	}
	return (val > 0)? 1: 2; //1 = clockwise, 2 = counterclockwise
}
function onSegment(p0, p1, p2){
    if (p1[0] <= max(p0[0], p2[0]) && p1[0] >= Math.min(p0[0], p2[0]) &&
        p1[1] <= max(p0[1], p2[1]) && p1[1] >= Math.min(p0[1], p2[1])){
       return true;
	}
    return false;
}

function segmentSegmentIntersection(s0, s1){
	//ray's starting x and y points (px and py), and parametric component directions (dx and dy)
	r_px = s0[0][0];
	r_py = s0[0][1];
	r_dx = (s0[1][0]-r_px);
	r_dy = (s0[1][1]-r_py);
	
	//same as above for the line segment
	s_px = s1[0][0];
	s_py = s1[0][1];
	s_dx = (s1[1][0]-s_px);
	s_dy = (s1[1][1]-s_py);
	
	//Find if the lines are parallel, if so there's no intersection
	r_mag = (((r_dx*r_dx)+(r_dy*r_dy))**0.5);
	s_mag = (((s_dx*s_dx)+(s_dy*s_dy))**0.5);
	
	//check for /0 error
	if(r_mag==0){
		return null;
	}
	
	if(r_dx/r_mag==s_dx/s_mag && r_dy/r_mag==s_dy/s_mag){
		return null;
	}
	
	//find T1 and T2, for the parametric equations
	try{
		t2 = ((r_dx*(s_py-r_py)) + (r_dy*(r_px-s_px)))/((s_dx*r_dy) - (s_dy*r_dx));
		t1 = (s_px+(s_dx*t2)-r_px)/r_dx;
	}catch(Exception e){
		//catches /0 errors when lines are straight horizontal/vertical
		t2 = ((r_dx*(s_py-r_py)) + (r_dy*(r_px-s_px)))/((s_dx*r_dy) - (s_dy*r_dx));
		t1 = (s_py+s_dy*t2-r_py)/r_dy; //this is added from my previous version because only r_dx ever throws an error
	}
	
	//if the parametric T values are past these parameters the intersection isn't on the segments
	if(t1<0.0 || t1>1.0){
		return null;
	}
	if(t2<-0.00001 || t2>1.00001){
		return null;
	}
	
	//otherwise, you're good, and can plug in all the variables you just found to find the point of intersection [x, y, t]
	return [r_px+(r_dx*t1), r_py+(r_dy*t1), t1];
	
}

//sorting and equivalence functions
function pointsToSegments(points){
	segments = [];
	for(i = 0; i<points.length; i++){
		if(i<points.length-1){
			segments.add([points[i].clone(), points[i+1].clone()]);
		}else{
			segments.add([points[i].clone(), points[0].clone()]);
		}
	}
	return segments;
}

function segmentsEqual(s0, s1){
	return
		(s0[0][0] == s1[0][0] &&
		s0[0][1] == s1[0][1] &&
		s0[1][0] == s1[1][0] &&
		s0[1][1] == s1[1][1]) ||
		(s0[0][0] == s1[1][0] &&
		s0[0][1] == s1[1][1] &&
		s0[1][0] == s1[0][0] &&
		s0[1][1] == s1[0][1]);
}

function listsEqual(l0, l1){
	
	if(l0.length != l1.length){
		return false;
	}
	
	for(i = 0; i<l0.length; i++){
		if(l0[i] != l1[i]){
			return false;
		}
	}
	
	return true;
	
}

function segmentListsEqual(l0, l1){

	if(listsEqual(l0, l1)){
		return true;
	}
	
	for(i = 0; i<l0.length; i++){
		if(!segmentsEqual(l0[i],l1[i])){
			return false;
		}
	}
	
	return true;
	
}

function mergeIntervals(v){
	
	if(v == null || v.length == 0){
		return null;
	}
	
	v = sortIntervals(v);
	intervals = [];
	
	intervals.add([v[0][0], v[0][1]]);
	
	for(i = 1; i<v.length; i++){
		x1 = v[i][0];
		y1 = v[i][1];
		x2 = intervals[intervals.length - 1][0];
		y2 = intervals[intervals.length - 1][1];
		
		if(y2 >= x1) {
			intervals[intervals.length - 1][1] = Math.max(y1, y2);
		} else {
			intervals.add([x1, y1]);
		}
	}
	
	return intervals;
	
}
function sortIntervals(v){
	
	currentList = v;
	intervals = [];
	finalList = [];
	
	for(i : currentList){
		if(i[0] < i[1]){
			intervals.add([i[0], i[1]]);
		}else{
			intervals.add([i[1], i[0]]);
		}
	}
	
	while(intervals.length > 0){
		
		currentMin = intervals[0][0];
		currentMinIndex = 0;
		for(i = 0; i<intervals.length; i++){
			if(intervals[i][0] < currentMin){
				currentMin = intervals[i][0];
				currentMinIndex = i;
			}
		}
		finalList.add(intervals[currentMinIndex]);
		intervals.remove(currentMinIndex);
		
	}
	
	return finalList;
}

//aesthetic functions
function fade(fadeTime, alpha, fadeIn){
	
	if(fadeIn){
		alpha = alpha + (255.0*DT/fadeTime);
		if(alpha >= 255){
			return 255;
		}else{
			return alpha;
		}
	}else{
		alpha = alpha - (255.0*DT/fadeTime);
		if(alpha <= 0){
			return 0;
		}else{
			return alpha;
		}
	}
}

function backColorShift(s, sr, sg, sb, visible){ //s is shift from the background, srgb are custom depending on the object
	
	colors = [BR+sr+s[0], BG+sg+s[1], BB+sb+s[2], 0];
	if(visible){
		colors[4] = 255;
	}
	return colors;
}

function rainbowRGBShift(rgbShift){
	
	for(i = 0; i<3; i++){
		if(rgbShift[i]%2 == 0){
			rgbShift[i] = rgbShift[i] + 2;
			if(rgbShift[i] > 96){
				rgbShift[i]--;
			}
		}else{
			rgbShift[i] = rgbShift[i] - 2;
			if(rgbShift[i] < 0){
				rgbShift[i]++;
			}
		}
	}
	return rgbShift;
}

function drawBackgroundDiagonals(bOffset, rgbShift){
		
		x = -bOffset;
		y = bOffset;
		
		space = 100;
		
		for(i = 0; i<7; i++){
			xi = x - (i*space) + 320;
			yi = y + (i*space) - 320;
			Graphics2D.Draw.line(xi, yi, xi+WIDTH, yi+HEIGHT, 80, BR-8+rgbShift[0], BG-8+rgbShift[1], BB-8+rgbShift[2]);
		}
		
		bOffset++;
		if(bOffset == space){
			bOffset = 0;
		}
		
		return bOffset;
		
	}

function borderDraw(x, y, w, h, b, t, rgbShift, alpha){
	
	/*
	Parameters:
	- x/y are the top left coordinate of the text
	- w/h are the width and height of the text
	- b is the buffer distance between the text and the edge of the lines
	- t is the line thickness
	*/
	
	c = [0, 0, 0];
	
	//horizontal lines
	Graphics2D.Draw.line(x-b+(t/2), y-b, x+w+b-(t/2), y-b, t, c[0], c[1], c[2], alpha);
	Graphics2D.Draw.line(x-b+(t/2), y+h+b, x+w+b-(t/2), y+h+b, t, c[0], c[1], c[2], alpha);
	
	//vertical lines
	Graphics2D.Draw.line(x-b, y-b, x-b, y+h+b, t, c[0], c[1], c[2], alpha);
	Graphics2D.Draw.line(x+w+b, y-b, x+w+b, y+h+b, t, c[0], c[1], c[2], alpha);
	
	//triangles from top left to bottom right
	Graphics2D.Draw.triangle(x-b+(t/2), y-b-(t/2), x-b+(t/2), y-b, x-b-(t/2), y-b, c[0], c[1], c[2], alpha);
	Graphics2D.Draw.triangle(x+b-(t/2)+w, y-b-(t/2), x+b-(t/2)+w, y-b, x+b+(t/2)+w, y-b, c[0], c[1], c[2], alpha);
	Graphics2D.Draw.triangle(x-b+(t/2), y+b+(t/2)+h, x-b+(t/2), y+b+h, x-b-(t/2), y+b+h, c[0], c[1], c[2], alpha);
	Graphics2D.Draw.triangle(x+b-(t/2)+w, y+b+(t/2)+h, x+b-(t/2)+w, y+b+h, x+b+(t/2)+w, y+b+h, c[0], c[1], c[2], alpha);
	
	Graphics2D.Draw.quad(x-b+(t/2), y-b+(t/2), x+w+b-(t/2), y-b+(t/2), x+w+b-(t/2), y+h+b-(t/2), x-b+(t/2), y+h+b-(t/2), BR+32+rgbShift[0], BG+32+rgbShift[1], BB+32+rgbShift[2], alpha);
	
}

function pauseDraw(){
	
	Graphics2D.Draw.rectangle(0,0,WIDTH,HEIGHT,0,0,0,127);
	Graphics2D.Draw.rectangle(((WIDTH/2)-120), ((HEIGHT/2)-120), 80, 240, 255, 255, 255, 127);
	Graphics2D.Draw.rectangle(((WIDTH/2)+40), ((HEIGHT/2)-120), 80, 240, 255, 255, 255, 127);
	
}

class StartupScene : AbstractScene{
	
	constructor() : base(){}
	
	function update(inputManager, events){
		this.switchScene(new TitleScene([0, 0, 32]));	
	}
	
	function render(){
		Graphics2D.Draw.fill(128, 128, 128);
	}
	
}