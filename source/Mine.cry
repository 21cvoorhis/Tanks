import Graphics2D;
import Math;
import Random;
import TwoCansAlpha4;

class Mine : Object{
	
	field bodyColor;
	field flashTimer;
	
	constructor(pos, radius, color, timeLeft) : base(pos, radius, color){
		
		this.bodyColor = color.clone();
		this.timeLeft = timeLeft;
		this.flashTimer = 0;
		
	}
	
	function updateMine(tanks){
		
		if(this.timeLeft > 0){
			this.timeLeft -= DT;
			this.collisionDie(tanks);
			
			if(this.timeLeft <= 2.0){
				this.flashColors(this.bodyColor, [255, 0, 0, 255], 0.25);
			}else if(this.timeLeft <= 6.0){
				this.flashColors(this.bodyColor, [255, 127, 0, 255], 0.5);
			}
			
		}else{
			this.alive = false;
		}
		
	}
	
	function flashColors(color, flashColor, flashTime){
		if(this.flashTimer >= flashTime){
			if(this.color == color){
				this.color = flashColor;
			}else{
				this.color = color;
			}
			this.flashTimer = 0.0;
		}
		this.flashTimer += DT;
	}
	
	function collisionDie(tanks){
		
		for(i = 0; i<tanks.length; i++){
			for(j = 0; j<tanks[i].bullets.length; j++){
				if(circleCircleCollision(tanks[i].bullets[j].pos, tanks[i].bullets[j].r, this.pos, this.r)){
					this.alive = false;
					return null;
				}
			}
			for(j = 0; j<tanks[i].explosions.length; j++){
				if(circleCircleCollision(tanks[i].explosions[j].pos, tanks[i].explosions[j].r, this.pos, this.r) && tanks[i].explosions[j].timeLeft >= tanks[i].explosions[j].killTime){
					this.alive = false;
					return null;
				}
			}
		}
		
	}
	
	function drawMine(){
		Graphics2D.Draw.ellipse(this.pos[0]-(this.r+1), this.pos[1]-(this.r+1), (this.r*2)+2, (this.r*2)+2, 0, 0, 0, this.color[3]);
		Graphics2D.Draw.ellipse(this.pos[0]-this.r, this.pos[1]-this.r, this.r*2, this.r*2, this.color[0], this.color[1], this.color[2], this.color[3]);
	}
	
}